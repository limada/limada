//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.3053
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using NUnit.Framework;
using System.Collections.Generic;
using System.Collections;

namespace Limaki.Tests.Mono
{

	/// <summary>
	/// bug-545056_Program.cs 
	/// </summary>
	[TestFixture]
	public class MonoMarshalByRefError
	{

		[Test]
		public void Test () {
						// This one I discovered while trying to make a cut-down test case. :/
			new MyTest<SomeClass>().Method();

			// This was directly derived from my original problem code.
			List<SomeClass> list = new List<SomeClass>();
			list.Add(new SomeClass());
			MyEnumerable<SomeClass> se = new MyEnumerable<SomeClass>(list);
			foreach (SomeClass v in se)
			{
				Console.WriteLine(v.ToString());
			}
		}
	}
	
	
	class SomeClass
	{
	}

	public class MyTest2<T> : MarshalByRefObject
	{
		public void Method2()
		{
		}
	}

	public class MyTest<T>
	{
		public void Method()
		{
			new MyTest2<T>().Method2();
		}
	}

	public class MyEnumerator<T> : MarshalByRefObject, IEnumerator<T>
	{
		IEnumerator<T> _input;
		public MyEnumerator(IEnumerator<T> input)
		{
			_input = input;
		}

		#region IEnumerator<T> Members

		public T Current
		{
			get { return _input.Current; }
		}

		#endregion

		#region IDisposable Members

		public void Dispose()
		{
			_input.Dispose();
		}

		#endregion

		#region IEnumerator Members

		object IEnumerator.Current
		{
			get { return _input.Current; }
		}

		public bool MoveNext()
		{
			return _input.MoveNext();
		}

		public void Reset()
		{
			_input.Reset();
		}

		#endregion
	}

	public class MyEnumerable<T> : IEnumerable<T>
	{
		IEnumerable<T> _input;

		public MyEnumerable(IEnumerable<T> input)
		{
			_input = input;
		}

		#region IEnumerable<T> Members

		public IEnumerator<T> GetEnumerator()
		{
			return new MyEnumerator<T>(_input.GetEnumerator());
		}

		#endregion

		#region IEnumerable Members

		IEnumerator IEnumerable.GetEnumerator()
		{
			return new MyEnumerator<T>(_input.GetEnumerator());
		}

		#endregion
	}
}
